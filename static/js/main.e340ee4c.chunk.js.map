{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["lowerCase","string","charAt","slice","toLowerCase","App","props","get_timetables","fetch","method","headers","body","then","res","json","itineraries","data","plan","start","startTimes","next","nextTimes","destinations","transIDs","i","length","push","legs","mode","date","Date","startTime","hours","getHours","minutes","getMinutes","substr","to","name","trip","routeShortName","tripHeadsign","setState","createTable","table","state","columns","this","today","mins","digit","time","className","rel","href","align","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAGA,SAASA,EAAUC,GACjB,OAAOA,EAAOC,OAAO,GAAKD,EAAOE,MAAM,GAAGC,c,IAwJ7BC,E,kDApJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,eAAiB,WACfC,MAAM,kEAAmE,CACvEC,OAAQ,OACRC,QAAS,CACP,eAAgB,uBAElBC,KAAK,8zBAiCNC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAUJ,IARA,IAAIC,EAAcD,EAAKE,KAAKC,KAAKF,YAC7BG,EAAQ,GACRC,EAAa,GACbC,EAAO,GACPC,EAAY,GACZC,EAAe,GACfC,EAAW,GAEPC,EAAI,EAAGA,EAAIT,EAAYU,OAAQD,IAAK,CAC1CN,EAAMQ,KAAK1B,EAAUe,EAAYS,GAAGG,KAAK,GAAGC,OAC5C,IAAIC,EAAO,IAAIC,KAAKf,EAAYS,GAAGG,KAAK,GAAGI,WACvCC,EAAQH,EAAKI,WACbC,EAAU,IAAML,EAAKM,aACzBhB,EAAWO,KAAKM,EAAQ,IAAME,EAAQE,QAAQ,IAC9Cd,EAAaI,KAAKX,EAAYS,GAAGG,KAAK,GAAGU,GAAGC,MAEzCvB,EAAYS,GAAGG,KAAKF,OAAS,GAC9BL,EAAKM,KAAK1B,EAAUe,EAAYS,GAAGG,KAAK,GAAGC,OAE3CI,GADAH,EAAO,IAAIC,KAAKf,EAAYS,GAAGG,KAAK,GAAGI,YAC1BE,WACbC,EAAU,IAAML,EAAKM,aACrBd,EAAUK,KAAKM,EAAQ,IAAME,EAAQE,QAAQ,IAC7Cb,EAASG,KAAKX,EAAYS,GAAGG,KAAK,GAAGY,KAAKC,eAAiB,KAAOzB,EAAYS,GAAGG,KAAK,GAAGY,KAAKE,gBAI9FrB,EAAKM,KAAK,OACVL,EAAUK,KAAK,OACfH,EAASG,KAAK,QAGlB,EAAKgB,SAAS,CAACxB,MAAOA,EAAOC,WAAYA,EAAYG,aAAcA,EAAcF,KAAMA,EAAMC,UAAWA,EAAWE,SAAUA,QArF9G,EA0FnBoB,YAAc,WAIZ,IAFA,IAAIC,EAAQ,GAEJpB,EAAI,EAAGA,EAAI,EAAKqB,MAAM3B,MAAMO,OAAQD,IAAK,CAC/C,IAAIsB,EAAU,GACdA,EAAQpB,KAAK,6BAAK,EAAKmB,MAAM1B,WAAWK,MACxCsB,EAAQpB,KAAK,6BAAK,EAAKmB,MAAM3B,MAAMM,MACnCsB,EAAQpB,KAAK,6BAAK,EAAKmB,MAAMvB,aAAaE,MAC1CsB,EAAQpB,KAAK,6BAAK,EAAKmB,MAAMxB,UAAUG,MACvCsB,EAAQpB,KAAK,6BAAK,EAAKmB,MAAMzB,KAAKI,MAClCsB,EAAQpB,KAAK,6BAAK,EAAKmB,MAAMtB,SAASC,MACtCoB,EAAMlB,KAAK,6BAAKoB,KAGlB,OAAOF,GAvGP,EAAKC,MAAQ,CACX3B,MAAO,GACPC,WAAY,GACZG,aAAc,GACdF,KAAM,GACNC,UAAW,GACXE,SAAU,IARK,E,0CA6GnB,WAEEwB,KAAKxC,iBACL,IAAIyC,EAAQ,IAAIlB,KACZmB,EAAOD,EAAMb,aACbe,EAAQ,GAETD,EAAO,KACRC,EAAQ,KAGV,IAAIC,EAAOH,EAAMf,WAAa,IAAMiB,EAAQD,EAE5C,OACI,sBAAKG,UAAU,MAAf,UACE,sBAAMC,IAAI,aAAaC,KAAK,oEAC5B,sEACA,gDAAmBH,KACnB,wBAAOC,UAAU,mBAAmBG,MAAM,SAA1C,UACE,4BACA,gCACE,+BACE,4CACA,wCACA,qDACA,gDACA,uDACA,wDAGJ,gCACGR,KAAKJ,0B,GA7IFa,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,MAAK,SAAA0D,GACjCA,EAAaC,kB","file":"static/js/main.e340ee4c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction lowerCase(string) {\n  return string.charAt(0) + string.slice(1).toLowerCase();\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: [],\n      startTimes: [],\n      destinations: [],\n      next: [],\n      nextTimes: [],\n      transIDs: []\n    };\n  }\n  \n  get_timetables = () => {\n    fetch('https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql', { //fetch data via HSL API\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/graphql\"\n      },\n      body: `{ plan(\n          from: {lat: 60.2716403915943, lon: 24.84663514090327}\n          to: {lat: 60.169301684811906, lon: 24.93325791874904}\n          numItineraries: 6\n          transportModes: [{mode: BUS}, {mode: RAIL}, {mode:TRAM}, {mode: SUBWAY}, {mode:WALK}]\n        ) {\n          itineraries{\n            walkDistance,\n            duration,\n            legs {\n              mode\n              startTime\n              endTime\n              from {\n                name\n                stop {\n                  code\n                  name\n                }\n              },\n              to {\n                name\n              },\n              trip {\n                tripHeadsign\n                routeShortName\n              },\n              distance\n            }\n          }\n        }\n      }`\n    })\n    .then(res => res.json())\n    .then(json => {\n\n      var itineraries = json.data.plan.itineraries;\n      var start = [];\n      var startTimes = [];\n      var next = [];\n      var nextTimes = [];\n      var destinations = [];\n      var transIDs = [];\n      \n      for(var i = 0; i < itineraries.length; i++) {\n        start.push(lowerCase(itineraries[i].legs[0].mode));\n        var date = new Date(itineraries[i].legs[0].startTime);\n        var hours = date.getHours();\n        var minutes = \"0\" + date.getMinutes();\n        startTimes.push(hours + ':' + minutes.substr(-2));\n        destinations.push(itineraries[i].legs[0].to.name);\n\n        if(itineraries[i].legs.length > 1) {\n          next.push(lowerCase(itineraries[i].legs[1].mode));\n          date = new Date(itineraries[i].legs[1].startTime);\n          hours = date.getHours();\n          minutes = \"0\" + date.getMinutes();\n          nextTimes.push(hours + ':' + minutes.substr(-2));\n          transIDs.push(itineraries[i].legs[1].trip.routeShortName + ', ' + itineraries[i].legs[1].trip.tripHeadsign);\n        }\n\n        else {\n          next.push('End');\n          nextTimes.push('End');\n          transIDs.push('End');\n        }\n      }\n      this.setState({start: start, startTimes: startTimes, destinations: destinations, next: next, nextTimes: nextTimes, transIDs: transIDs});\n\n    });\n  };\n\n  createTable = () => {\n\n    var table = [];\n\n    for(var i = 0; i < this.state.start.length; i++) {\n      var columns = [];\n      columns.push(<td>{this.state.startTimes[i]}</td>);\n      columns.push(<td>{this.state.start[i]}</td>);\n      columns.push(<td>{this.state.destinations[i]}</td>);\n      columns.push(<td>{this.state.nextTimes[i]}</td>);\n      columns.push(<td>{this.state.next[i]}</td>);\n      columns.push(<td>{this.state.transIDs[i]}</td>);\n      table.push(<tr>{columns}</tr>);\n    }\n\n    return table;\n\n  }\n\n  render () {\n\n    this.get_timetables();\n    var today = new Date();\n    var mins = today.getMinutes();\n    var digit = \"\";\n\n    if(mins < 10) {\n      digit = \"0\"\n    }\n\n    var time = today.getHours() + \":\" + digit + mins;\n\n    return (\n        <div className=\"App\">\n          <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/uikit@3.3.0/dist/css/uikit.min.css\" />\n          <h1>Kuohukuja public transport timetable</h1>\n          <h2>Current time: {time}</h2>\n          <table className=\"uk-table-striped\" align=\"center\">\n            <caption></caption>\n            <thead>\n              <tr>\n                <th>Leave home</th>\n                <th>Method</th>\n                <th>Transportation from</th>\n                <th>Departure time</th>\n                <th>Transportation method</th>\n                <th>Transportation ID</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.createTable()}\n            </tbody>\n          </table>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}